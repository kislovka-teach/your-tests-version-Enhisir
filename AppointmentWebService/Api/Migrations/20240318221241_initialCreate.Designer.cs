// <auto-generated />
using System;
using Api;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240318221241_initialCreate")]
    partial class initialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.2.24128.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Handsome master"
                        });
                });

            modelBuilder.Entity("Api.Models.User", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHashed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserName");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Api.Models.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DoctorUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Finding")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("boolean");

                    b.Property<string>("PatientUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PatientUserName1")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorUserName");

                    b.HasIndex("PatientUserName");

                    b.HasIndex("PatientUserName1");

                    b.ToTable("Visits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 3, 18, 21, 0, 0, 0, DateTimeKind.Utc),
                            DoctorUserName = "bold",
                            Finding = "pomer...",
                            IsSuccessful = true,
                            PatientUserName = "enhisir"
                        });
                });

            modelBuilder.Entity("Api.Models.Doctor", b =>
                {
                    b.HasBaseType("Api.Models.User");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.HasIndex("SpecializationId");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            UserName = "bold",
                            Name = "Johnny",
                            PasswordHashed = "BkzkmI4A3hFvbaqygoUp3A==;nb5zeL+pk5DcHH1ZHeRAs8uQRhS0m3Lej76miizLckw=",
                            Role = 0,
                            Surname = "Sins",
                            SpecializationId = 1
                        });
                });

            modelBuilder.Entity("Api.Models.Patient", b =>
                {
                    b.HasBaseType("Api.Models.User");

                    b.HasDiscriminator().HasValue("Patient");

                    b.HasData(
                        new
                        {
                            UserName = "enhisir",
                            Name = "m",
                            PasswordHashed = "kMauyjlmyQ21EU74zgh5Xw==;RUcTLejCWX9IQrnQE8Dwbc9VMzeOB5QwKNnv8EJP3+A=",
                            Role = 0,
                            Surname = "s"
                        },
                        new
                        {
                            UserName = "nikoimam",
                            Name = "n",
                            PasswordHashed = "OkabuTLPhHUMoauV+EHsrA==;om6GF8jrbZz87b1c3WEqRRCkoni/XJOEJLSeFn2ng6o=",
                            Role = 0,
                            Surname = "i"
                        });
                });

            modelBuilder.Entity("Api.Models.Visit", b =>
                {
                    b.HasOne("Api.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorUserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.Patient", null)
                        .WithMany("Visits")
                        .HasForeignKey("PatientUserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.Doctor", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientUserName1");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Api.Models.Doctor", b =>
                {
                    b.HasOne("Api.Models.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Api.Models.Patient", b =>
                {
                    b.Navigation("Visits");
                });
#pragma warning restore 612, 618
        }
    }
}
